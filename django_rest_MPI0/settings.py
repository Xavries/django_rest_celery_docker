"""
Django settings for django_rest_MPI0 project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4sm_6_&dhaaa2n2d_0k*$xy^k9rp!j+-4aj#a_=j_kug2v1^wr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

### New acctions may be added in the future
ACTION_OPTIONS = ["upvote"] 

### CELERY STUFF

# CELERY_BROKER_URL = 'amqp://guest:guest@localhost'  to connect to a local instance of RabbitMQ
#or
CELERY_BROKER_URL = 'redis://localhost:6379'
#CELERY_ACCEPT_CONTENT = ['json']
#CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_BACKEND = 'redis://localhost:6379' #'db+sqlite:///results.sqlite'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Helsinki'
CELERY_IMPORTS = ('django_rest_MPI0.tasks',)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mpiapi0.apps.Mpiapi0Config',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_rest_MPI0.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_rest_MPI0.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER':'postgres',
        'PASSWORD':'postgres',
        'HOST':'db', #'postgres', 
        'PORT':'5432'
    }
}
'''
### docker-compose NOT WORKING. CAN'T SEE CONNECTION
# sudo docker build .
# sudo docker-compose build
# sudo docker-compose exec web python manage.py migrate --noinput
# sudo docker-compose up -d --build
# sudo docker ps -a

db:
    image: postgres
    restart: always
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=mpi_api_DB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA="/var/lib/postgresql/data/pgdata"
    ports:
      - "54321:54321"
'''
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import django
django.setup()

#from celery.schedules import crontab
import django_rest_MPI0.tasks

CELERY_BEAT_SCHEDULE = {
    "delete_old_upvotes": {
        "task": "django_rest_MPI0.tasks.delete_old_upvotes",
        "schedule": 20.0, # crontab(minute="*/1"),
    },
}
# 1 # run celery worker: celery -A django_rest_MPI0.celery worker --loglevel=info
# 2 # run celery beat scheduler: celery -A django_rest_MPI0.celery beat --loglevel=info
# that's all
